// <auto-generated />
using System;
using CVGS.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CVGS.Migrations
{
    [DbContext(typeof(CVGSContext))]
    [Migration("20201126013540_remakeDB")]
    partial class remakeDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CVGS.Models.AddressMailing", b =>
                {
                    b.Property<Guid>("MailingId")
                        .HasColumnName("mailingId");

                    b.Property<string>("ApartmentNumber")
                        .IsRequired()
                        .HasColumnName("apartmentNumber")
                        .HasMaxLength(20);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasMaxLength(20);

                    b.Property<string>("CountryCode");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("firstName")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lastModified")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("lastName")
                        .HasMaxLength(20);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnName("postalCode")
                        .HasMaxLength(6);

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnName("province")
                        .HasMaxLength(20);

                    b.Property<string>("ProvinceCode");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnName("street")
                        .HasMaxLength(20);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("userId")
                        .HasMaxLength(450);

                    b.HasKey("MailingId")
                        .HasName("PK__AddressM__4E8DFD561DD20E0B");

                    b.HasIndex("CountryCode");

                    b.HasIndex("ProvinceCode");

                    b.HasIndex("UserId");

                    b.ToTable("AddressMailing");
                });

            modelBuilder.Entity("CVGS.Models.AddressShipping", b =>
                {
                    b.Property<Guid>("ShippingId")
                        .HasColumnName("shippingId");

                    b.Property<string>("ApartmentNumber")
                        .IsRequired()
                        .HasColumnName("apartmentNumber")
                        .HasMaxLength(20);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasMaxLength(20);

                    b.Property<string>("CountryCode");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("firstName")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lastModified")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("lastName")
                        .HasMaxLength(20);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnName("postalCode")
                        .HasMaxLength(6);

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnName("province")
                        .HasMaxLength(20);

                    b.Property<string>("ProvinceCode");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnName("street")
                        .HasMaxLength(20);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("userId")
                        .HasMaxLength(450);

                    b.HasKey("ShippingId")
                        .HasName("PK__AddressS__EDF80BCA6656726E");

                    b.HasIndex("CountryCode");

                    b.HasIndex("ProvinceCode");

                    b.HasIndex("UserId");

                    b.ToTable("AddressShipping");
                });

            modelBuilder.Entity("CVGS.Models.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("CVGS.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CVGS.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("CVGS.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("CVGS.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("CVGS.Models.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CVGS.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('Tell us about yourself.')");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(450);

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnName("dateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasColumnName("firstName")
                        .HasMaxLength(450);

                    b.Property<string>("GamerTag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('YourGamerTag')");

                    b.Property<string>("Gender")
                        .HasColumnName("gender")
                        .HasMaxLength(450);

                    b.Property<string>("LastName")
                        .HasColumnName("lastName")
                        .HasMaxLength(450);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<bool?>("PromoEmailEnabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ProvinceState")
                        .HasColumnName("provinceState")
                        .HasMaxLength(450);

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CVGS.Models.CategoryPreference", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("userId");

                    b.Property<int>("GamecategoryId")
                        .HasColumnName("gamecategoryId");

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lastModified")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId", "GamecategoryId")
                        .HasName("PK__Category__5503CE5E31DD18C6");

                    b.HasIndex("GamecategoryId");

                    b.ToTable("CategoryPreference");
                });

            modelBuilder.Entity("CVGS.Models.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(3);

                    b.Property<string>("Alpha2Code")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FrenchName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Code")
                        .HasName("Country_PK");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("CVGS.Models.EsrbRating", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(5);

                    b.Property<string>("EnglishRating")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("FrenchRating")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Code")
                        .HasName("EsrbRatingCode_PK");

                    b.ToTable("EsrbRating");
                });

            modelBuilder.Entity("CVGS.Models.Game", b =>
                {
                    b.Property<Guid>("Guid");

                    b.Property<string>("EnglishDescription")
                        .HasMaxLength(4000);

                    b.Property<string>("EnglishDetail")
                        .HasMaxLength(4000);

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(70);

                    b.Property<string>("EnglishPlayerCount")
                        .HasMaxLength(30);

                    b.Property<string>("EnglishTrailer")
                        .HasMaxLength(4000);

                    b.Property<string>("EsrbRatingCode")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("FrenchDescription")
                        .HasMaxLength(4000);

                    b.Property<string>("FrenchDetail")
                        .HasMaxLength(4000);

                    b.Property<string>("FrenchName")
                        .IsRequired()
                        .HasMaxLength(70);

                    b.Property<string>("FrenchPlayerCount")
                        .HasMaxLength(30);

                    b.Property<string>("FrenchTrailer")
                        .HasMaxLength(4000);

                    b.Property<bool>("FrenchVersion");

                    b.Property<int>("GameCategoryId");

                    b.Property<string>("GamePerspectiveCode")
                        .HasMaxLength(1);

                    b.Property<string>("GameStatusCode")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<int?>("GameSubCategoryId");

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lastModified")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('Unknown')")
                        .HasMaxLength(30);

                    b.HasKey("Guid")
                        .HasName("Game_PK");

                    b.HasIndex("EsrbRatingCode");

                    b.HasIndex("GameCategoryId");

                    b.HasIndex("GamePerspectiveCode");

                    b.HasIndex("GameStatusCode");

                    b.HasIndex("GameSubCategoryId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("CVGS.Models.GameCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnglishCategory")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("FrenchCategory")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("GameCategory");
                });

            modelBuilder.Entity("CVGS.Models.GamePerspective", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(1);

                    b.Property<string>("EnglishPerspectiveName")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("FrenchPerspectiveName")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("Code")
                        .HasName("GamePerspective_PK");

                    b.ToTable("GamePerspective");
                });

            modelBuilder.Entity("CVGS.Models.GameStatus", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(1);

                    b.Property<string>("EnglishCategory")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("FrenchCategory")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("Code")
                        .HasName("GameStatus_PK");

                    b.ToTable("GameStatus");
                });

            modelBuilder.Entity("CVGS.Models.GameSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnglishCategory")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("FrenchCategory")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("GameCategoryId");

                    b.HasKey("Id");

                    b.ToTable("GameSubCategory");
                });

            modelBuilder.Entity("CVGS.Models.Platform", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10);

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("FrenchName")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.HasKey("Code")
                        .HasName("Platform_PK");

                    b.ToTable("Platform");
                });

            modelBuilder.Entity("CVGS.Models.PlatformPreference", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("userId");

                    b.Property<string>("PlatformCode")
                        .HasColumnName("platformCode")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lastModified")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId", "PlatformCode")
                        .HasName("PK__Platform__A669FBFE92BE477D");

                    b.HasIndex("PlatformCode");

                    b.ToTable("PlatformPreference");
                });

            modelBuilder.Entity("CVGS.Models.Province", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(2);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<double?>("FederalTax")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FederalTaxAcronym")
                        .HasMaxLength(10);

                    b.Property<string>("FrenchName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<double?>("ProvincialTax")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ProvincialTaxAcronym")
                        .HasMaxLength(10);

                    b.Property<bool?>("PstOnGst")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Code")
                        .HasName("ProvinceLookup_PK");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("CVGS.Models.SubCategoryPreference", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("userId");

                    b.Property<int>("GameSubcategoryId")
                        .HasColumnName("gameSubcategoryId");

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lastModified")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId", "GameSubcategoryId")
                        .HasName("PK__SubCateg__AEDF96AEA68DA694");

                    b.HasIndex("GameSubcategoryId");

                    b.ToTable("SubCategoryPreference");
                });

            modelBuilder.Entity("CVGS.Models.AddressMailing", b =>
                {
                    b.HasOne("CVGS.Models.Country", "CountryCodeNavigation")
                        .WithMany()
                        .HasForeignKey("CountryCode");

                    b.HasOne("CVGS.Models.Province")
                        .WithMany("AddressMailing")
                        .HasForeignKey("ProvinceCode");

                    b.HasOne("CVGS.Models.AspNetUsers", "User")
                        .WithMany("AddressMailing")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__AddressMa__userI__7908F585");
                });

            modelBuilder.Entity("CVGS.Models.AddressShipping", b =>
                {
                    b.HasOne("CVGS.Models.Country", "CountryCodeNavigation")
                        .WithMany()
                        .HasForeignKey("CountryCode");

                    b.HasOne("CVGS.Models.Province")
                        .WithMany("AddressShipping")
                        .HasForeignKey("ProvinceCode");

                    b.HasOne("CVGS.Models.AspNetUsers", "User")
                        .WithMany("AddressShipping")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__AddressSh__userI__79FD19BE");
                });

            modelBuilder.Entity("CVGS.Models.AspNetRoleClaims", b =>
                {
                    b.HasOne("CVGS.Models.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CVGS.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("CVGS.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CVGS.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("CVGS.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CVGS.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("CVGS.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CVGS.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CVGS.Models.AspNetUserTokens", b =>
                {
                    b.HasOne("CVGS.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CVGS.Models.CategoryPreference", b =>
                {
                    b.HasOne("CVGS.Models.GameCategory", "Gamecategory")
                        .WithMany("CategoryPreference")
                        .HasForeignKey("GamecategoryId")
                        .HasConstraintName("FK__CategoryP__gamec__61316BF4");

                    b.HasOne("CVGS.Models.AspNetUsers", "User")
                        .WithMany("CategoryPreference")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__CategoryP__userI__603D47BB");
                });

            modelBuilder.Entity("CVGS.Models.Game", b =>
                {
                    b.HasOne("CVGS.Models.EsrbRating", "EsrbRatingCodeNavigation")
                        .WithMany("Game")
                        .HasForeignKey("EsrbRatingCode")
                        .HasConstraintName("Game_EsrbRating_FK");

                    b.HasOne("CVGS.Models.GameCategory", "GameCategory")
                        .WithMany("Game")
                        .HasForeignKey("GameCategoryId")
                        .HasConstraintName("Game_GameCategory_FK");

                    b.HasOne("CVGS.Models.GamePerspective", "GamePerspectiveCodeNavigation")
                        .WithMany("Game")
                        .HasForeignKey("GamePerspectiveCode")
                        .HasConstraintName("Game_GamePerspective_FK");

                    b.HasOne("CVGS.Models.GameStatus", "GameStatusCodeNavigation")
                        .WithMany("Game")
                        .HasForeignKey("GameStatusCode")
                        .HasConstraintName("Game_GameStatus_FK");

                    b.HasOne("CVGS.Models.GameSubCategory", "GameSubCategory")
                        .WithMany("Game")
                        .HasForeignKey("GameSubCategoryId")
                        .HasConstraintName("Game_GameSubCategory_FK");
                });

            modelBuilder.Entity("CVGS.Models.PlatformPreference", b =>
                {
                    b.HasOne("CVGS.Models.Platform", "PlatformCodeNavigation")
                        .WithMany("PlatformPreference")
                        .HasForeignKey("PlatformCode")
                        .HasConstraintName("FK__PlatformP__platf__5C6CB6D7");

                    b.HasOne("CVGS.Models.AspNetUsers", "User")
                        .WithMany("PlatformPreference")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__PlatformP__userI__5B78929E");
                });

            modelBuilder.Entity("CVGS.Models.SubCategoryPreference", b =>
                {
                    b.HasOne("CVGS.Models.GameSubCategory", "GameSubcategory")
                        .WithMany("SubCategoryPreference")
                        .HasForeignKey("GameSubcategoryId")
                        .HasConstraintName("FK__SubCatego__gameS__65F62111");

                    b.HasOne("CVGS.Models.AspNetUsers", "User")
                        .WithMany("SubCategoryPreference")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__SubCatego__userI__6501FCD8");
                });
#pragma warning restore 612, 618
        }
    }
}
